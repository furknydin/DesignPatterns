Amaç:
    Define a one-to-many dependency between objects so that when one object changes state, all its dependents
    are notified updated automatically.

Problem:
    Zaman zaman bir nesnenin durumundaki değişiklikleri takip etmek ve onlardan haberdar olmak isteriz
    Bunu yapmanın bir yolu belli aralıklarla nesnenin durumunu sorgulamak
    Bu yaklaşım etkili değildir çünkü gerekssiz yere devamlı sorgulama gerektirir üstelik değişikliği anında öğrenemeyiz

Çözüm:
    Observer design pattern kullanmak.
    Observer nesne, durumundaki değişiklikten haberdar olmak istediği konu (observable) nesneye abone olur.
    Observable nesne durumundaki değişikliği observer nesnelere haber eder.
    ***Don't call us we will call you.

Tanımlar:
    Observable ---> Durumundaki değişikliğn takip edildiği nesne, konu yada subject yada publisher
    Observer ---> Konu nesneye abone olup ondaki değişikliklerden haberdar olmak isteyen nesne, abone yada subscriber
    Notification, broadcast ---> Konu nesnenin değişikliği abone nesnelere haber etmesi. Güncelleme
    Event ---> Konu nesnelerin abonelerini uyarırken kendilerine gönderdiği bilgilendirme.

Sonuçlar:

    Bir nesnenin durumundan haberdar olmak isteyen çok fazla nesne varsa observer kullanılır.
    Konuya obone olan nesneler istemeseler de her türlü güncellemede haberdar olurlar. Bunu önlemek için extra önlem
    almak gerekmektedir.



Genel Bilgiler

 *** Tek methodu olan interfacelere functional interface denir.Lambda expression ile ifade edilebilir.
 Böyle interfacelerin objesini geçmek demek aslında methodunu geçmek demek.
